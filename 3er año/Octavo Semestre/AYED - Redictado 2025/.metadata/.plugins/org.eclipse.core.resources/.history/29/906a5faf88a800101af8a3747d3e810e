package tp2.BinaryTree;

public class punto7 {

	private BinaryTree<Integer> arbol;
	
	public boolean isLeftTree(Integer num) {
		BinaryTree<Integer> nuevoArbol = new BinaryTree<Integer>();
		nuevoArbol = buscarNum(num, this.arbol);
		return isLeftTree(nuevoArbol);
	}
	
	private BinaryTree<Integer> buscarNum(Integer num, BinaryTree<Integer> arb) {
		if (arb.getData() == num)
			return arb;
		else
			if (arb.hasLeftChild()) {
				return buscarNum(num, arb.getLeftChild());
			}
			if (arb.hasRightChild()) {
				return buscarNum(num, arb.getRightChild());
			}
		return null;
	}
	
	private boolean isLeftTree(BinaryTree<Integer> arb) {
		if (arb == null)
			return false;
		else
			if (arb.hasLeftChild()) {
				Integer HI = contarHijosUnicos(arb.getLeftChild());
				isLeftTree(arb.getLeftChild());
			}
			if (arb.hasRightChild()) {
				Integer HD = contarHijosUnicos(arb.getRightChild());
			}
	}
	
}
