package ParcialGrafo;

import PackElementos.*;
import PackGrafos.*;

public class ParcialClass {
	
	private boolean[] marcarExceptuando(Grafo<String> grafo, ListaGenerica<String> exceptuando) {
		boolean[] devolver = new boolean[grafo.listaDeVertices().tamanio() + 1];
			
		if (!grafo.esVacio()) {
			Vertice<String> v = null;
			exceptuando.comenzar();
			while (!exceptuando.fin()) {
				boolean ok = false;
				String act = exceptuando.proximo();
				//System.out.println("EXCP:" + act);
				ListaGenerica<Vertice<String>> lis = grafo.listaDeVertices();
				lis.comenzar();
				while (!lis.fin() && !ok) {
					v = lis.proximo();
					if (v.dato().equals(act)) {
						//System.out.println("encontre:" + v.dato());
						ok = true;
						devolver[v.posicion()] = true; //LO MARCO COMO VISITADO ASI NO ENTRO EN ESE VERTICE
					}
				}
			}
		}
		return devolver;
	}
	
	private Vertice<String> buscarVertice(Grafo<String> grafo, String buscar){
		ListaGenerica<Vertice<String>> lis = grafo.listaDeVertices();
		boolean ok = false;
		Vertice<String> v = null;
		lis.comenzar();
		while (!lis.fin() && !ok) {
			v = lis.proximo();
			if (v.dato().equals(buscar)) {
				ok = true;
			}
		}
		return v;
	}
	
	
	public ListaGenerica<Objeto> resolver(Grafo<String> grafo, String origen, 
			String destino, ListaGenerica<String> exceptuando){
		
		ListaGenerica<Objeto> caminos = new ListaEnlazadaGenerica<Objeto>();
		
		if (!grafo.esVacio()) {
			ListaGenerica<String> l = new ListaEnlazadaGenerica<String>();
			boolean[] marca = marcarExceptuando(grafo, exceptuando);
			Vertice<String> ori = buscarVertice(grafo, origen);
			Vertice<String> dest = buscarVertice(grafo, destino);
			int cuadras = 0;
			if (ori != null && dest != null) {
				devolver(ori.posicion(), grafo, l, caminos, marca, cuadras, destino);
			}
		}
		
		return caminos;
	}

	private void devolver(int i, Grafo<String> grafo, ListaGenerica<String> l, ListaGenerica<Objeto> caminos,
			boolean[] marca, int cuadras, String destino) {
		
		marca[i] = true;
		
		Vertice<String> v = grafo.vertice(i);
		l.agregarFinal(v.dato());

		if (v.dato().equals(destino)) {
			Objeto obj = new Objeto(l.clonar(), cuadras);
			caminos.agregarFinal(obj);
		}else {
			ListaGenerica<Arista<String>> ady = grafo.listaDeAdyacentes(v);
			ady.comenzar();
			while (!ady.fin()) {
				Arista<String> arista = ady.proximo();
				int j = arista.verticeDestino().posicion();
				int peso = arista.peso();
				if (!marca[j]) {
					//System.out.println(pagoMax-arista.peso()+ " dato -> " +grafo.vertice(j).dato());
					devolver(j,grafo,l, caminos, marca, (cuadras+peso), destino);
					l.eliminarEn(l.tamanio());
					marca[j] = false; // desmarco porque puedo llegar a formar un camino desde otro v√©rtice
				}
			}
		}
	}
	
	
}





